# =============================================================================
# AI Assistant Experimental Dockerfile
# =============================================================================
# Single Dockerfile with environment variable controls for production/development modes
# Installs uv via pip instead of using uv-astral image

# =============================================================================
# Builder Stage
# =============================================================================
FROM python:3.12.3-slim AS builder

# Set environment variables for builder
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    UV_CACHE_DIR=/root/.cache/uv

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Install uv via pip (as requested)
RUN pip install --no-cache-dir uv==0.9.3

# Set work directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Copy application code first (needed for version import)
COPY app/ ./app/

# Create virtual environment and install dependencies
# Environment variable controls whether to install dev dependencies
ARG BUILD_MODE=production
RUN if [ "$BUILD_MODE" = "development" ]; then \
        uv venv /opt/venv && \
        uv sync --frozen --group dev --no-cache; \
    else \
        uv venv /opt/venv && \
        uv sync --frozen --no-dev --no-cache; \
    fi

# Install Playwright browsers
RUN /opt/venv/bin/playwright install chromium firefox webkit

# =============================================================================
# Production Stage
# =============================================================================
FROM python:3.12-slim AS production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH="/app" \
    PATH="/opt/venv/bin:$PATH" \
    UV_CACHE_DIR=/tmp/.uv-cache

# Install basic runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gnupg \
    unzip \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Chrome and ChromeDriver only in production mode
ARG BUILD_MODE=production
RUN if [ "$BUILD_MODE" = "production" ]; then \
        # Install runtime dependencies for Selenium WebDriver and Playwright
        apt-get update && apt-get install -y \
        fonts-liberation \
        libasound2 \
        libatk-bridge2.0-0 \
        libatk1.0-0 \
        libc6 \
        libcairo2 \
        libcups2 \
        libdbus-1-3 \
        libexpat1 \
        libfontconfig1 \
        libgbm1 \
        libgcc1 \
        libglib2.0-0 \
        libgtk-3-0 \
        libnspr4 \
        libnss3 \
        libpango-1.0-0 \
        libpangocairo-1.0-0 \
        libstdc++6 \
        libx11-6 \
        libx11-xcb1 \
        libxcb1 \
        libxcomposite1 \
        libxcursor1 \
        libxdamage1 \
        libxext6 \
        libxfixes3 \
        libxi6 \
        libxrandr2 \
        libxrender1 \
        libxss1 \
        libxtst6 \
        lsb-release \
        xdg-utils \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean \
        \
        # Install Chrome for Selenium WebDriver
        && wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome.gpg \
        && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
        && apt-get update \
        && apt-get install -y google-chrome-stable \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean \
        \
        # Install ChromeDriver
        && CHROMEDRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE) \
        && wget -O /tmp/chromedriver.zip https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip \
        && unzip /tmp/chromedriver.zip -d /usr/local/bin/ \
        && chmod +x /usr/local/bin/chromedriver \
        && rm /tmp/chromedriver.zip; \
    fi

# Install Playwright dependencies only in development mode
RUN if [ "$BUILD_MODE" = "development" ]; then \
        /opt/venv/bin/playwright install-deps; \
    fi

# Create non-root user with proper permissions
RUN groupadd -r app && \
    useradd -r -g app --home-dir /app --shell /bin/bash app

# Set work directory
WORKDIR /app

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy application code with proper ownership
COPY --chown=app:app app/ ./app/
COPY --chown=app:app pyproject.toml ./
COPY --chown=app:app utility/ ./utility/

# Create necessary directories and set permissions
RUN mkdir -p /app/logs /app/.uv-cache && \
    chown -R app:app /app && \
    chmod +x /app/utility/startup_dev.py

# Switch to non-root user
USER app

# Expose ports (both 8000 and 8888 to cover both scenarios)
EXPOSE 8000 8888

# Health check (will be used in production mode)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Copy entrypoint script that handles both production and development modes
COPY --chown=app:app entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Run the application with the appropriate command
CMD ["/app/entrypoint.sh"]