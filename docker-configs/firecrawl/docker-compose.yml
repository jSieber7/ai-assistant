# =============================================================================
# Firecrawl Self-Hosted Docker Configuration
# =============================================================================
# This configuration runs Firecrawl services locally instead of using the external API

networks:
  firecrawl-network:
    driver: bridge

volumes:
  firecrawl_redis_data:
    driver: local
  firecrawl_postgres_data:
    driver: local

services:
  # =============================================================================
  # Firecrawl Core Services
  # =============================================================================

  # Redis for Firecrawl queue and caching
  firecrawl-redis:
    image: redis:7.2-alpine
    container_name: firecrawl-redis
    volumes:
      - firecrawl_redis_data:/data
    networks:
      - firecrawl-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"  # Internal service only

  # PostgreSQL for Firecrawl data storage
  firecrawl-postgres:
    image: postgres:15-alpine
    container_name: firecrawl-postgres
    environment:
      - POSTGRES_DB=firecrawl
      - POSTGRES_USER=firecrawl
      - POSTGRES_PASSWORD=firecrawl_password
    volumes:
      - firecrawl_postgres_data:/var/lib/postgresql/data
    networks:
      - firecrawl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U firecrawl"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"  # Internal service only

  # Firecrawl Playwright Service for browser automation
  firecrawl-playwright:
    image: ghcr.io/firecrawl/firecrawl-playwright:latest
    container_name: firecrawl-playwright
    environment:
      - PORT=3000
      - HOST=0.0.0.0
    networks:
      - firecrawl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=false"  # Internal service only

  # Firecrawl API Service
  firecrawl-api:
    image: ghcr.io/firecrawl/firecrawl:latest
    container_name: firecrawl-api
    environment:
      # Server Configuration
      - PORT=3002
      - HOST=0.0.0.0
      
      # Database Configuration
      - DATABASE_URL=postgresql://firecrawl:firecrawl_password@firecrawl-postgres:5432/firecrawl
      
      # Redis Configuration
      - REDIS_URL=redis://firecrawl-redis:6379
      - REDIS_RATE_LIMIT_URL=redis://firecrawl-redis:6379
      
      # Playwright Service Configuration
      - PLAYWRIGHT_MICROSERVICE_URL=http://firecrawl-playwright:3000
      
      # Authentication (optional, set to true if you want to enable)
      - USE_DB_AUTHENTICATION=false
      
      # Queue Admin Panel
      - BULL_AUTH_KEY=${FIRECRAWL_BULL_AUTH_KEY:-change_me_firecrawl}
      
      # Optional: OpenAI API for AI features (extract, etc.)
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Optional: Proxy configuration
      # - PROXY_SERVER=${PROXY_SERVER}
      # - PROXY_USERNAME=${PROXY_USERNAME}
      # - PROXY_PASSWORD=${PROXY_PASSWORD}
      
      # Optional: SearXNG for search API
      # - SEARXNG_ENDPOINT=${SEARXNG_ENDPOINT}
      
      # Optional: LlamaParse for PDF parsing
      # - LLAMAPARSE_API_KEY=${LLAMAPARSE_API_KEY}
      
      # API Rate Limiting
      - RATE_LIMIT_MAX_REQUESTS=100
      - RATE_LIMIT_WINDOW_MS=60000
      
    depends_on:
      firecrawl-redis:
        condition: service_healthy
      firecrawl-postgres:
        condition: service_healthy
      firecrawl-playwright:
        condition: service_healthy
    networks:
      - firecrawl-network
      - ai-assistant-network  # Connect to main network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      # Internal service - accessible only within Docker network
      - "traefik.enable=false"

  # Firecrawl Worker Service
  firecrawl-worker:
    image: ghcr.io/firecrawl/firecrawl:latest
    container_name: firecrawl-worker
    command: ["npm", "run", "worker"]
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://firecrawl:firecrawl_password@firecrawl-postgres:5432/firecrawl
      
      # Redis Configuration
      - REDIS_URL=redis://firecrawl-redis:6379
      - REDIS_RATE_LIMIT_URL=redis://firecrawl-redis:6379
      
      # Playwright Service Configuration
      - PLAYWRIGHT_MICROSERVICE_URL=http://firecrawl-playwright:3000
      
      # Optional: OpenAI API for AI features
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Optional: Proxy configuration
      # - PROXY_SERVER=${PROXY_SERVER}
      # - PROXY_USERNAME=${PROXY_USERNAME}
      # - PROXY_PASSWORD=${PROXY_PASSWORD}
      
      # Worker Configuration
      - WORKER_CONCURRENCY=5
      
    depends_on:
      firecrawl-redis:
        condition: service_healthy
      firecrawl-postgres:
        condition: service_healthy
      firecrawl-playwright:
        condition: service_healthy
    networks:
      - firecrawl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=false"  # Internal service only

  # =============================================================================
  # Optional: Firecrawl Web UI (for development/debugging)
  # =============================================================================
  
  # Uncomment this service if you want a web interface for Firecrawl
  # firecrawl-ui:
  #   image: ghcr.io/firecrawl/firecrawl-ui:latest
  #   container_name: firecrawl-ui
  #   environment:
  #     - API_URL=http://firecrawl-api:3002
  #   depends_on:
  #     - firecrawl-api
  #   networks:
  #     - firecrawl-network
  #   restart: unless-stopped
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.firecrawl-ui.rule=PathPrefix(`/firecrawl`)"
  #     - "traefik.http.routers.firecrawl-ui.entrypoints=web"
  #     - "traefik.http.routers.firecrawl-ui.middlewares=security-headers@file,rate-limit@file"
  #     - "traefik.http.services.firecrawl-ui.loadbalancer.server.port=3000"