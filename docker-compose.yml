# =============================================================================
# AI Assistant Docker Compose Configuration
# =============================================================================
# Usage examples:
# - Development: docker compose --profile dev up
# - Production: docker compose up
# - With Firecrawl: docker compose --profile firecrawl up
# - With optional services: docker compose --profile dev --profile monitoring up

networks:
  ai-assistant-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  searxng_static:
    driver: local
  firecrawl_redis_data:
    driver: local
  jina_reranker_logs:
    driver: local
  milvus_data:
    driver: local

services:
  firecrawl:
    image: ghcr.io/firecrawl/firecrawl:latest
    container_name: firecrawl
    environment:
      - PORT=3002
      - HOST=0.0.0.0
      - REDIS_URL=redis://redis:6379/1
      - USE_DB_AUTHENTICATION=true
      - BULL_AUTH_KEY=${FIRECRAWL_BULL_AUTH_KEY:-dev-firecrawl-key}
      - RATE_LIMIT_MAX_REQUESTS=100
      - RATE_LIMIT_WINDOW_MS=60000
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:dev-password@supabase-db:5432/postgres
      - DATABASE_SCHEMA=firecrawl
      - POSTGRES_URL=postgresql://postgres:dev-password@supabase-db:5432/postgres
      - POSTGRES_HOST=supabase-db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=dev-password
      - POSTGRES_DB=postgres
      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL:-http://localhost:8000}
      - SUPABASE_ANON_TOKEN=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_TOKEN=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - redis
      - supabase-db
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production
      - dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.firecrawl.rule=PathPrefix(`/firecrawl`)"
      - "traefik.http.routers.firecrawl.entrypoints=web"
      - "traefik.http.routers.firecrawl.middlewares=security-headers@file,rate-limit@file"
      - "traefik.http.services.firecrawl.loadbalancer.server.port=3002"

  # =============================================================================
  # Jina Reranker Service
  # =============================================================================

  # Jina AI Reranker Service
  jina-reranker:
    build:
      context: ./config/jina-reranker
      dockerfile: Dockerfile
    container_name: ai-assistant-jina-reranker
    environment:
      - JINA_API_KEY=${JINA_API_KEY}
      - REDIS_URL=redis://redis:6379/1
      - CONFIG_PATH=/app/config.yml
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - jina_reranker_logs:/app/logs
      - ./config/jina-reranker/config.yml:/app/config.yml
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - production
      - dev
    labels:
      # Traefik routing for external access
      - "traefik.enable=true"
      - "traefik.http.routers.jina-reranker.rule=PathPrefix(`/rerank`)"
      - "traefik.http.routers.jina-reranker.priority=300"
      - "traefik.http.routers.jina-reranker.entrypoints=web"
      - "traefik.http.routers.jina-reranker.middlewares=security-headers@file,rate-limit@file,compression@file"
      - "traefik.http.services.jina-reranker.loadbalancer.server.port=8080"

  # =============================================================================
  # Milvus Vector Database Service
  # =============================================================================

  # Etcd for Milvus metadata storage
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - milvus_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai-assistant-network
    profiles:
      - production
      - dev
    labels:
      - "traefik.enable=false"  # Internal service only

  # MinIO for Milvus object storage
  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
    volumes:
      - milvus_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai-assistant-network
    profiles:
      - production
      - dev
    labels:
      - "traefik.enable=false"  # Internal service only

  # Milvus vector database
  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.0
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - ai-assistant-network
    profiles:
      - production
      - dev
    labels:
      - "traefik.enable=false"  # Internal service only

  # =============================================================================
  # Core Services
  # =============================================================================

  # Main AI Assistant Application
  ai-assistant:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-assistant
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - SEARXNG_URL=http://searxng:8080
      - BASE_URL=${BASE_URL:-http://localhost}
      - DATABASE_URL=postgresql://postgres:dev-password@supabase-db:5432/postgres
      - MULTI_WRITER_POSTGRESQL_CONNECTION_STRING=postgresql://postgres:dev-password@supabase-db:5432/postgres?options=--search_path%3Dmulti_writer
    depends_on:
      redis:
        condition: service_healthy
      searxng:
        condition: service_healthy
      milvus:
        condition: service_healthy
      supabase-db:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - searxng_static:/usr/local/searxng/searx/static:ro
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production # ONLY in production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-assistant.rule=PathPrefix(`/`) && !PathPrefix(`/chat`)"
      - "traefik.http.routers.ai-assistant.priority=1"
      - "traefik.http.routers.ai-assistant.entrypoints=web"
      - "traefik.http.routers.ai-assistant.middlewares=security-headers@file,rate-limit@file,compression@file"

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: ai-assistant-redis
    volumes:
      - redis_data:/data
    networks:
      - ai-assistant-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SearXNG for web search capabilities
  searxng:
    image: searxng/searxng:latest
    container_name: ai-assistant-searxng
    networks:
      - ai-assistant-network
    restart: unless-stopped
    # ADD THIS: Creates a temporary, writable, in-memory filesystem at /run.
    # This allows the container's startup scripts to create sockets and pidfiles
    # without failing on a read-only filesystem. The "exec" option is required
    # by some startup processes.
    tmpfs:
      - /run:exec
      - /tmp
    ports:
      - "8088:8080"
    volumes:
      # Keep these as read-only, which is a security best practice.
      - ./config/searxng/settings.yml:/etc/searxng/settings.yml:ro
      - ./config/searxng/limiter.toml:/etc/searxng/limiter.toml:ro
      - ./config/searxng/plugins.yml:/etc/searxng/plugins.yml:ro
      - searxng_static:/usr/local/searxng/searx/static
    environment:
      - BASE_URL=/search
      - BIND_ADDRESS=0.0.0.0
      - PORT=8080
      - SEARXNG_SECRET_KEY=${SEARXNG_SECRET_KEY:-change-this-secret-key}
      - SEARXNG_INSTANCE_NAME=${SEARXNG_INSTANCE_NAME:-AI Assistant Search}
      - SEARXNG_THEME=${SEARXNG_THEME:-simple}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - production
      - dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.searxng.rule=PathPrefix(`/search`)"
      - "traefik.http.routers.searxng.priority=200"
      - "traefik.http.routers.searxng.entrypoints=web"
      # - "traefik.http.routers.searxng.middlewares=searxng-stripprefix@file" # <-- ADD THIS
      - "traefik.http.services.searxng.loadbalancer.server.port=8080"

  # =============================================================================
  # Production Services
  # =============================================================================

  # Production Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: ai-assistant-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--ping=true"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/docker/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config/docker/middlewares.yml:/etc/traefik/dynamic/middlewares.yml:ro
      - ./config/docker/traefik-prod.yml:/etc/traefik/traefik-prod.yml:ro
    env_file:
      - .env
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "traefik", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - production # ONLY in production
  # =============================================================================
  # Development Profile
  # =============================================================================

  # Development AI Assistant
  ai-assistant-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ai-assistant-dev
    volumes:
      - .:/app
      - ./logs:/app/logs
      - /app/.venv
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - RELOAD=true
      - REDIS_URL=redis://redis:6379/0
      - SEARXNG_URL=http://searxng:8080
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=postgresql://postgres:dev-password@supabase-db:5432/postgres
      - MULTI_WRITER_POSTGRESQL_CONNECTION_STRING=postgresql://postgres:dev-password@supabase-db:5432/postgres?options=--search_path%3Dmulti_writer
    depends_on:
      redis:
        condition: service_healthy
      searxng:
        condition: service_healthy
      milvus:
        condition: service_healthy
      supabase-db:
        condition: service_healthy
      supabase-kong:
        condition: service_started
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    command: ["uv", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    profiles:
      - dev # ONLY in dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-assistant-dev.rule=PathPrefix(`/`) && !PathPrefix(`/search`) && !PathPrefix(`/chat`)"
      - "traefik.http.routers.ai-assistant-dev.priority=100"
      - "traefik.http.routers.ai-assistant-dev.entrypoints=web"
      - "traefik.http.services.ai-assistant-dev.loadbalancer.server.port=8000"

  # Development Traefik
  traefik-dev:
    image: traefik:v3.0
    container_name: ai-assistant-traefik-dev
    restart: unless-stopped
    ports:
      - "8000:80"
      - "8080:8080"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.forwardedheaders.insecure"
      - "--entrypoints.traefik.address=:8080"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--ping=true"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
      - "--ping.entrypoint=traefik"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/docker/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config/docker/middlewares.yml:/etc/traefik/dynamic/middlewares.yml:ro
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - dev # ONLY in dev

  # Chainlit Interface Service
  chainlit:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ai-assistant-chainlit
    volumes:
      - .:/app  # Mount source code for hot reload
      - ./logs:/app/logs
      # Exclude .venv to prevent Docker from using host's virtual environment
      - /app/.venv
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - RELOAD=true
      - REDIS_URL=redis://redis:6379/0  # Override for Docker network
      - SEARXNG_URL=http://searxng:8080   # Override for Docker network
      - HOST=0.0.0.0
      - PORT=8001
      - DATABASE_URL=postgresql://postgres:dev-password@supabase-db:5432/postgres
      - MULTI_WRITER_POSTGRESQL_CONNECTION_STRING=postgresql://postgres:dev-password@supabase-db:5432/postgres?options=--search_path%3Dmulti_writer
      - CHAINLIT_BASE_PATH=/chat
    depends_on:
      redis:
        condition: service_healthy
      searxng:
        condition: service_healthy
      milvus:
        condition: service_healthy
      supabase-db:
        condition: service_healthy
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "-O-", "http://localhost:8001/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    command: ["uv", "run", "chainlit", "run", "chainlit_app.py", "--host", "0.0.0.0", "--port", "8001"]
    profiles:
      - dev
      - production
    labels:
      # Traefik routing for Chainlit
      - "traefik.enable=true"
      - "traefik.http.routers.chainlit.rule=PathPrefix(`/chat`)"
      - "traefik.http.routers.chainlit.priority=150"
      - "traefik.http.routers.chainlit.entrypoints=web"
      - "traefik.http.routers.chainlit.middlewares=chainlit-websocket@file,chainlit-stripprefix@file"
      - "traefik.http.routers.chainlit.service=chainlit"
      - "traefik.http.services.chainlit.loadbalancer.server.port=8001"
      - "traefik.http.services.chainlit.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.chainlit.loadbalancer.sticky.cookie.name=chainlit-session"


  # Redis Commander for Redis GUI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-assistant-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:8081/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - dev
      - production
    labels:
      # Traefik routing for Redis Commander
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander.rule=PathPrefix(`/redis`)"
      - "traefik.http.routers.redis-commander.entrypoints=web"
      - "traefik.http.routers.redis-commander.middlewares=security-headers@file"
      - "traefik.http.services.redis-commander.loadbalancer.server.port=8081"

  # =============================================================================
  # Optional Services (can be enabled with any profile)
  # =============================================================================

  # =============================================================================
  # Local Supabase Services (replaces postgres)
  # =============================================================================
  # See https://github.com/supabase/cli for reference
  # Access Supabase UI at http://localhost:8000 (studio) or http://localhost:8001 (kong)

  supabase-db:
    image: supabase/postgres:15.1.0.117
    container_name: ai-assistant-supabase-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_PASSWORD: dev-password
      POSTGRES_DB: postgres
      POSTGRES_INITDB_ARGS: --data-checksums
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init-supabase.sql:/docker-entrypoint-initdb.d/00-init-supabase.sql:ro
    networks:
      - ai-assistant-network
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
      - -c
      - log_min_messages=fatal
    profiles:
      - dev
      - production
    # Disable Traefik for this internal service
    labels:
      - "traefik.enable=false"

  # Inbucket for email testing
  inbucket:
    image: inbucket/inbucket:3.0.4
    container_name: ai-assistant-inbucket
    restart: unless-stopped
    ports:
      - "2500:2500" # SMTP
      - "9000:9000" # Web UI
    networks:
      - ai-assistant-network
    profiles:
      - dev
      - production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Disable Traefik for this internal service
    labels:
      - "traefik.enable=false"

  supabase-auth:
    image: supabase/gotrue:v2.79.0
    container_name: ai-assistant-supabase-auth
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://postgres:dev-password@supabase-db:5432/postgres
      GOTRUE_SITE_URL: http://localhost:8000
      GOTRUE_API_EXTERNAL_URL: http://localhost:9999
      GOTRUE_URI_ALLOW_LIST: "*"
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_JWT_SECRET: n4spEEnsO_2xEeg0XM402v6T1I6o5Ars22sdWgBPLnS96NPsJez4xfoamS0n_aiA
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_EXTERNAL_EMAIL_ENABLED: true
      GOTRUE_MAILER_AUTOCONFIRM: true
      GOTRUE_SMTP_ADMIN_EMAIL: admin@email.com
      GOTRUE_SMTP_HOST: inbucket
      GOTRUE_SMTP_PORT: 2500
      GOTRUE_SMTP_USER: root
      GOTRUE_SMTP_PASS: root
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: /auth/v1/verify
      GOTRUE_MAILER_URLPATHS_RECOVERY: /auth/v1/recover
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: /auth/v1/email-change
      GOTRUE_MAILER_URLPATHS_INVITE: /auth/v1/invite
      GOTRUE_EXTERNAL_GOOGLE_ENABLED: "false"
      GOTRUE_EXTERNAL_GITHUB_ENABLED: "false"
      GOTRUE_EXTERNAL_GITLAB_ENABLED: "false"
      GOTRUE_EXTERNAL_BITBUCKET_ENABLED: "false"
      GOTRUE_EXTERNAL_AZURE_ENABLED: "false"
      GOTRUE_EXTERNAL_FACEBOOK_ENABLED: "false"
      GOTRUE_EXTERNAL_TWITTER_ENABLED: "false"
      GOTRUE_EXTERNAL_APPLE_ENABLED: "false"
      GOTRUE_EXTERNAL_DISCORD_ENABLED: "false"
      GOTRUE_EXTERNAL_SLACK_ENABLED: "false"
      GOTRUE_EXTERNAL_SPOTIFY_ENABLED: "false"
      GOTRUE_EXTERNAL_LINKEDIN_ENABLED: "false"
      GOTRUE_EXTERNAL_TWITCH_ENABLED: "false"
      GOTRUE_EXTERNAL_WORKOS_ENABLED: "false"
    networks:
      - ai-assistant-network
    depends_on:
      supabase-db:
        condition: service_healthy
    ports:
      - "9999:9999"
    profiles:
      - dev
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Disable Traefik for this internal service
    labels:
      - "traefik.enable=false"

  supabase-rest:
    image: postgrest/postgrest:v11.2.0
    container_name: ai-assistant-supabase-rest
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgresql://authenticator:dev-password@supabase-db:5432/postgres
      PGRST_DB_SCHEMAS: public, storage, graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: n4spEEnsO_2xEeg0XM402v6T1I6o5Ars22sdWgBPLnS96NPsJez4xfoamS0n_aiA
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ai-assistant-network
    ports:
      - "3001:3000"
    profiles:
      - dev
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Disable Traefik for this internal service
    labels:
      - "traefik.enable=false"

  supabase-kong:
    image: kong:3.4
    container_name: ai-assistant-supabase-kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      JWT_SECRET: n4spEEnsO_2xEeg0XM402v6T1I6o5Ars22sdWgBPLnS96NPsJez4xfoamS0n_aiA
      SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNjAwMDAwMDAwLCJleHAiOjQ2MDAwMDAwMDB9.TpzxbO6I2sNpRNWbbFL5EA24rwC2_CghKDrkp2MWovk
      SUPABASE_SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiaXNzIjoic3VwYWJhc2UiLCJpYXQiOjE2MDAwMDAwMDAsImV4cCI6NDYwMDAwMDAwMH0.r6KJFIZ3SJ0apLjhQ-pSDvTnp2LgaPdCmJFJtj0MHhE
    volumes:
      - ./config/supabase/kong.yml:/kong/declarative/kong.yml:ro
    networks:
      - ai-assistant-network
    ports:
      - "8003:8000" # Kong Proxy
      - "8101:8001" # Kong Admin API
      - "8102:8002" # Kong Manager GUI
    depends_on:
      supabase-rest:
        condition: service_started
      supabase-auth:
        condition: service_started
    profiles:
      - dev
      - production
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Disable Traefik for this internal service
    labels:
      - "traefik.enable=false"

  # =============================================================================
  # Firecrawl Docker Service (DISABLED)
  # =============================================================================
  # NOTE: This service is disabled due to a configuration incompatibility
  # that prevents it from connecting to the postgres database.
  # The nuq-worker process is hardcoded to connect to localhost:5432.

  # firecrawl:
  #   image: ghcr.io/firecrawl/firecrawl:latest
  #   container_name: firecrawl
  #   env_file:
  #     - .env.dev
  #   environment:
  #     - PORT=3002
  #     - HOST=0.0.0.0
  #     - REDIS_URL=redis://redis:6379/1
  #     - USE_DB_AUTHENTICATION=false
  #     - BULL_AUTH_KEY=${FIRECRAWL_BULL_AUTH_KEY:-dev-firecrawl-key}
  #     - RATE_LIMIT_MAX_REQUESTS=100
  #     - RATE_LIMIT_WINDOW_MS=60000
  #     # Supabase Configuration
  #     - SUPABASE_URL=${SUPABASE_URL}
  #     - SUPABASE_ANON_TOKEN=${SUPABASE_ANON_KEY}
  #     - SUPABASE_SERVICE_TOKEN=${SUPABASE_SERVICE_ROLE_KEY}
  #   depends_on:
  #     - supabase-db
  #     - redis
  #   networks:
  #     - ai-assistant-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   profiles:
  #     - production
  #     - dev
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.firecrawl.rule=PathPrefix(`/firecrawl`)"
  #     - "traefik.http.routers.firecrawl.entrypoints=web"
  #     - "traefik.http.routers.firecrawl.middlewares=security-headers@file,rate-limit@file"
  #     - "traefik.http.services.firecrawl.loadbalancer.server.port=3002"


  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-assistant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - production
      - dev

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-assistant-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - production
      - dev