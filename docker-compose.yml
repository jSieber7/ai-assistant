# =============================================================================
# AI Assistant Docker Compose Configuration
# =============================================================================
# Usage examples:
# - Development: docker compose --profile dev up
# - Production: docker compose up
# - With optional services: docker compose --profile dev --profile monitoring up

networks:
  ai-assistant-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  searxng_static:
    driver: local

services:
  # =============================================================================
  # Core Services
  # =============================================================================

  # Main AI Assistant Application
  ai-assistant:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-assistant
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - REDIS_URL=redis://redis:6379/0
      - SEARXNG_URL=http://searxng:8080
      - BASE_URL=${BASE_URL:-http://localhost}
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      searxng:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - searxng_static:/usr/local/searxng/searx/static:ro  # Mount SearxNG static files
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - production
    labels:
      # Production Traefik routing with security
      - "traefik.enable=true"
      - "traefik.http.routers.ai-assistant.rule=PathPrefix(`/`)"
      - "traefik.http.routers.ai-assistant.priority=1"
      - "traefik.http.routers.ai-assistant.entrypoints=web"
      - "traefik.http.routers.ai-assistant.middlewares=security-headers@file,rate-limit@file,compression@file"
      - "traefik.http.routers.gradio.rule=PathPrefix(`/gradio`)"
      - "traefik.http.routers.gradio.priority=2"
      - "traefik.http.routers.gradio.entrypoints=web"
      - "traefik.http.routers.gradio.middlewares=security-headers@file,rate-limit@file,compression@file"

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: ai-assistant-redis
    volumes:
      - redis_data:/data
    networks:
      - ai-assistant-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"  # Internal service only

  # SearXNG for web search capabilities
  searxng:
    image: searxng/searxng:latest
    container_name: ai-assistant-searxng
    networks:
      - ai-assistant-network
    restart: unless-stopped
    volumes:
      - ./docker-configs/searxng/settings.yml:/etc/searxng/settings.yml:ro
      - ./docker-configs/searxng/limiter.toml:/etc/searxng/limiter.toml:ro
      - ./docker-configs/searxng/plugins.yml:/etc/searxng/plugins.yml:ro
      - searxng_static:/usr/local/searxng/searx/static
    environment:
      - BIND_ADDRESS=0.0.0.0
      - PORT=8080
      - BASE_URL=${SEARXNG_BASE_URL:-http://searxng:8080/}
      - SEARXNG_SECRET_KEY=${SEARXNG_SECRET_KEY:-change-this-secret-key}
      - SEARXNG_INSTANCE_NAME=${SEARXNG_INSTANCE_NAME:-AI Assistant Search}
      - SEARXNG_AUTOCOMPLETE=${SEARXNG_AUTOCOMPLETE:-google}
      - SEARXNG_SEARCH_LANGUAGE=${SEARXNG_SEARCH_LANGUAGE:-auto}
      - SEARXNG_THEME=${SEARXNG_THEME:-simple}
      - SEARXNG_UI_DEFAULT_LOCALE=${SEARXNG_UI_DEFAULT_LOCALE:-en}
      - SEARXNG_DEBUG=${SEARXNG_DEBUG:-false}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.searxng.rule=PathPrefix(`/search`)"
      - "traefik.http.routers.searxng.priority=10"
      - "traefik.http.routers.searxng.entrypoints=web"
      - "traefik.http.routers.searxng.service=searxng"
      - "traefik.http.services.searxng.loadbalancer.server.port=8080"

  # =============================================================================
  # Production Services
  # =============================================================================

  # Production Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: ai-assistant-traefik
    restart: unless-stopped
    ports:
      - "80:80"        # HTTP entry point
      - "443:443"      # HTTPS entry point (for future SSL)
      - "8080:8080"    # Traefik Dashboard (secure in production)
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--ping=true"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker-configs/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker-configs/traefik-prod.yml:/etc/traefik/traefik-prod.yml:ro
    env_file:
      - .env
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "traefik", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - production
    labels:
      # Only expose dashboard in production
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik.entrypoints=traefik"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$q8eL8Zt7$$8LZv8t8g8f8v8t8g8f8v8"

  # =============================================================================
  # Development Profile
  # =============================================================================

  # Development Traefik Reverse Proxy
  traefik-dev:
    image: traefik:v3.0
    container_name: ai-assistant-traefik-dev
    restart: unless-stopped
    ports:
      - "8000:80"      # Main entry point for dev (redirect to port 80)
      - "8080:8080"    # Traefik Dashboard
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.traefik.address=:8080"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--ping=true"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker-configs/traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "traefik", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - dev
    labels:
      # Expose dashboard at /dashboard in development
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dev.rule=PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik-dev.entrypoints=traefik"
      - "traefik.http.routers.traefik-dev.service=api@internal"

  # Development configuration with Traefik routing
  ai-assistant-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ai-assistant-dev
    volumes:
      - .:/app  # Mount source code for hot reload
      - ./logs:/app/logs
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - RELOAD=true
      - REDIS_URL=redis://redis:6379/0  # Override for Docker network
      - SEARXNG_URL=http://searxng:8080   # Override for Docker network
      - HOST=0.0.0.0
      - PORT=8000
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      searxng:
        condition: service_healthy
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: ["uv", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    profiles:
      - dev
    labels:
      # Development Traefik routing
      - "traefik.enable=true"
      - "traefik.http.routers.ai-assistant-dev.rule=PathPrefix(`/`)"
      - "traefik.http.routers.ai-assistant-dev.priority=1"
      - "traefik.http.routers.ai-assistant-dev.entrypoints=web"
      - "traefik.http.routers.ai-assistant-dev.service=ai-assistant-dev"
      - "traefik.http.services.ai-assistant-dev.loadbalancer.server.port=8000"
      - "traefik.http.routers.gradio-dev.rule=PathPrefix(`/gradio`)"
      - "traefik.http.routers.gradio-dev.priority=2"
      - "traefik.http.routers.gradio-dev.entrypoints=web"
      - "traefik.http.routers.gradio-dev.service=ai-assistant-dev"
      - "traefik.http.services.gradio-dev.loadbalancer.server.port=8000"

  # Development tools
  debug-tools:
    image: python:3.12-slim
    container_name: ai-assistant-debug-tools
    volumes:
      - .:/app
    working_dir: /app
    command: tail -f /dev/null  # Keep container running
    profiles:
      - dev

  # Redis Commander for Redis GUI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-assistant-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - dev
    labels:
      # Development Traefik routing for Redis Commander
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander.rule=PathPrefix(`/redis`)"
      - "traefik.http.routers.redis-commander.entrypoints=web"
      - "traefik.http.services.redis-commander.loadbalancer.server.port=8081"

  # =============================================================================
  # Optional Services (can be enabled with any profile)
  # =============================================================================

  # MongoDB for multi-writer system
  mongodb:
    image: mongo:7.0
    container_name: ai-assistant-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: multi_writer_system
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker-configs/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - mongodb

  # MongoDB Express (optional web UI)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: ai-assistant-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8082:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - mongodb

  # PostgreSQL for future use
  postgres:
    image: postgres:15-alpine
    container_name: ai-assistant-postgres
    environment:
      - POSTGRES_DB=langchain_agent_hub
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"  # Internal service only
    profiles:
      - postgres

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-assistant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker-configs/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-assistant-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker-configs/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - ai-assistant-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - monitoring