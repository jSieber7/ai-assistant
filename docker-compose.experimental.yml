# =============================================================================
# Experimental Docker Compose Configuration
# =============================================================================
# This file demonstrates how to use the experimental Dockerfile
# It can be used for both production and development environments

version: '3.8'

services:
  # Main application service using the experimental Dockerfile
  app:
    build:
      context: .
      dockerfile: Dockerfile.experimental
      args:
        # Set BUILD_MODE to 'production' or 'development'
        BUILD_MODE: ${BUILD_MODE:-production}
    environment:
      # Pass the BUILD_MODE to the container
      BUILD_MODE: ${BUILD_MODE:-production}
      # Add other environment variables as needed
      # DATABASE_URL: ${DATABASE_URL}
      # API_KEY: ${API_KEY}
    ports:
      - "8000:8000"
      # Additional port for development mode (will be unused in production)
      - "8888:8888"
    volumes:
      # Mount source code for development (will be unused in production)
      - ./app:/app/app
      - ./utility:/app/utility
      - ./pyproject.toml:/app/pyproject.toml
      - ./uv.lock:/app/uv.lock
    depends_on:
      # Add dependencies as needed
      # - postgres
      # - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Example of how to configure for production
  app-production:
    extends:
      file: docker-compose.experimental.yml
      service: app
    build:
      args:
        BUILD_MODE: production
    environment:
      BUILD_MODE: production
    # In production, you might not want to mount volumes
    volumes: []
    profiles:
      - production

  # Example of how to configure for development
  app-development:
    extends:
      file: docker-compose.experimental.yml
      service: app
    build:
      args:
        BUILD_MODE: development
    environment:
      BUILD_MODE: development
    profiles:
      - development

# Uncomment and configure these services as needed
# services:
#   postgres:
#     image: postgres:15
#     environment:
#       POSTGRES_DB: ${POSTGRES_DB:-ai_assistant}
#       POSTGRES_USER: ${POSTGRES_USER:-postgres}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   redis:
#     image: redis:7-alpine
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 3s
#       retries: 3

# volumes:
#   postgres_data:
#   redis_data: