services:
  # Main AI Assistant Application
  ai-assistant:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-assistant
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - SEARXNG_URL=http://searxng:8080
      - TOOL_SYSTEM_ENABLED=true
    env_file:
      - .env
    depends_on:
      - redis
      - searxng
    volumes:
      - ./logs:/app/logs
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: ai-assistant-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-assistant-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SearXNG for web search capabilities
  searxng:
    image: searxng/searxng:latest
    container_name: ai-assistant-searxng
    ports:
      - "8080:8080"
    networks:
      - ai-assistant-network
    restart: unless-stopped
    environment:
      - BIND_ADDRESS=0.0.0.0
      - PORT=8080
      - BASE_URL=http://localhost:8080/
    volumes:
      - ./searxng/settings.yml:/etc/searxng/settings.yml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: PostgreSQL for future use
  postgres:
    image: postgres:15-alpine
    container_name: ai-assistant-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=langchain_agent_hub
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - postgres  # Only start when explicitly requested

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  ai-assistant-network:
    driver: bridge