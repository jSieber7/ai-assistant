name: Python CI with UV

on:
  push:
    branches: [ main, development, feature/* ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '.github/**/*.md'
  pull_request:
    branches: [ main, development ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

env:
  PYTHON_VERSION: '3.12'
  UV_VERSION: '0.4.0'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest]
        include:
          - python-version: '3.12'
            os: ubuntu-latest
            coverage: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies with UV
      run: |
        uv sync --frozen --dev

    - name: Set test environment variables
      run: |
        echo "OPENROUTER_API_KEY=test-key-ci-123" >> $GITHUB_ENV
        echo "DEFAULT_MODEL=test-model" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV

    - name: Run unit tests
      run: |
        uv run python run_tests.py --unit --ci

    - name: Run integration tests
      run: |
        uv run python run_tests.py --integration --ci

    - name: Run full test suite (excluding slow tests)
      run: |
        uv run python run_tests.py --ci

    - name: Generate coverage report
      if: matrix.coverage
      run: |
        uv run python run_tests.py --coverage --ci

    - name: Upload coverage to Codecov
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit.xml
          coverage.xml
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set test environment variables
      run: |
        echo "OPENROUTER_API_KEY=test-key-security-scan" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV

    - name: Install dependencies with UV
      run: |
        uv sync --frozen --dev

    - name: Run security audit
      run: |
        uv run pip-audit

    - name: Run bandit security scanner
      run: |
        uv run bandit -r app/ -f json -o bandit-results.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-results.json
        retention-days: 30

  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies with UV
      run: |
        uv sync --frozen --dev

    - name: Run ruff linter
      run: |
        uv run ruff check .

    - name: Run black formatter check
      run: |
        uv run black --check .

    - name: Run mypy type checking
      run: |
        uv run mypy app/ --ignore-missing-imports

  push-protection:
    name: Push Protection
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    needs: [test, security, lint]

    steps:
    - name: Check if all checks passed
      run: |
        echo "All required checks have passed. Push protection successful."
        echo "Branch: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"

    - name: Fail if pushing to protected branches without PR
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Error: Direct pushes to main branch are not allowed."
        echo "Please create a pull request instead."
        exit 1