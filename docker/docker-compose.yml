include:
  - supabase/docker-compose.yml
  - searxng/docker-compose.yaml
  - firecrawl/docker-compose.yaml
  - ../docker/frontend/docker-compose.${ENVIRONMENT:-dev}.yml
  - app/docker-compose.yml

name: ${COMPOSE_PROJECT_NAME:-my-stack}

networks:
  shared-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  traefik-logs:
    driver: local

services:
  # ===========================================
  # SHARED INFRASTRUCTURE SERVICES
  # ===========================================
  
  traefik:
    image: traefik:${TRAEFIK_VERSION:-v3}
    container_name: ${COMPOSE_PROJECT_NAME:-my-stack}-traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    networks:
      - shared-network

  # traefik:
  #   image: traefik:${TRAEFIK_VERSION:-v3}
  #   container_name: ${COMPOSE_PROJECT_NAME:-my-stack}-traefik
  #   restart: unless-stopped
  #   ports:
  #     - "${TRAEFIK_HTTP_PORT:-80}:80"
  #     - "${TRAEFIK_HTTPS_PORT:-443}:443"
  #     - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
  #   volumes:
  #     - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - traefik-logs:/var/log/traefik
  #     - ./traefik/certs:/certs:ro
  #     - ./traefik/acme:/acme
  #   networks:
  #     - shared-network
  #   healthcheck:
  #     test: ["CMD", "traefik", "healthcheck", "--ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 10s
  #   environment:
  #     - ACME_EMAIL=${ACME_EMAIL:-admin@example.com}
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
  #     - "traefik.http.routers.dashboard.entrypoints=web"
  #     - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
  #     Enable HTTPS for dashboard (commented out for development to avoid SSL errors)
  #     - "traefik.http.routers.dashboard.tls=true"
  #     - "traefik.http.routers.dashboard.tls.certresolver=${TLS_CERT_RESOLVER:-selfsigned}"

  

  redis:
    image: redis:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-my-stack}-redis
    restart: unless-stopped
    # Redis is internal only - no port mapping to avoid conflicts
    # ports:
    #   - "6379:6379"  # Commented out to avoid conflicts
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"  # Don't expose Redis directly
    networks:
      - shared-network

  # ===========================================
  # APPLICATION SERVICES
  # ===========================================
